MEMORY 
{
    # Derine a fake "zero page", because ca65 doesn't know how to uandle
    # the 65816 direct page. This area is never actually used# it is just
    # defined so that we can put the ZEROPASGE segment in it. The actual
    # direct page is defined as BIOS_DP
    ZEROPAGE:   start=$0,      size=$100,   type=rw, define=yes, file="ram.bin";
    # The BANK0RAM area encompasses all of the free RAM in bank 0. This
    # region will be used exclusively for allocating stacks and direct
    # pages to processes.
    BANK0RAM:   start=$0000,   size=$E700,  type=rw, define=yes, file="ram.bin";
    # The direct page used by the JR/OS and the monitor
    BIOS_DP:    start=$E700,   size=$100,   type=rw, define=yes, file="ram.bin";
    # The stack used by JR/OS and the monitor
    SYSSTACK:   start=$E800,   size=$800,   type=rw, define=yes, file="ram.bin";
    # I/O address space, defined solely to make sure nothing else gets put here
    IO:         start=$F000,   size=$800,   type=rw, define=yes, file="ram.bin";
    # The RAM copy of the system call dispatch table goes here
    SC_TABLE:   start=$010000, size=$800,   type=rw, define=yes, file="ram.bin";
    # BSS holds the JR/OS bss segment
    BSS:        start=$010800, size=$001800, type=rw, define=yes, file="ram.bin";
    # USERRAM is all of the rest of system RAM
    USERRAM:    start=$012000, size=$0EE000, type=rw, define=yes, file="ram.bin";

    # System ROM areas. LOWROM is the first 62K of ROM. The next 2K is BANK0ROM,
    # which is mirroed into the $00/F800-FFFF space. The rest of ROM is HIGHROM.
    LOWROM:     start=$100000,  size=$00F800, type=ro, define=yes, fill=yes, file=%O;
    BANK0ROM:   start=$00F800,  size=$000800, type=ro, define=yes, fill=yes, file=%O;
    HIGHROM:    start=$110000,  size=$030000, type=ro, define=yes, fill=yes, file=%O;
}

SEGMENTS 
{
    ZEROPAGE:  load=ZEROPAGE, type=zp;
    SC_TABLE:  load=SC_TABLE, type=rw, align=$100;
    BSS:       load=BSS,      type=rw, align=$100;
    BOOTROM:   load=BANK0ROM, type=ro, align=$100;
    HWVECTORS: load=BANK0ROM, type=ro, offset=$7e4;
    OSROM:     load=LOWROM,   type=ro, align=$100;
}
